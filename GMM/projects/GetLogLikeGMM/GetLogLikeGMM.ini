# INI: GetLogLikeGMM #
# all of the lines may be specified also on the command line - see help (option -h)

in-file = SP1.prm            # -i: file(s) with feature vectors; option may be 
                             # specified several times
in-list = SP1_DIR            # -I: directory/filelist with files/filenames containing feature vectors
                             # option may be specified several times
in-GMM = GMM\fn.gmm          # -g: path to GMM
for-each = false             # -f: give log-like for each feature vector in specified files 
                             # (will be stored in a directory specified by '--outDir DIR' 
                             # with filename equal to the input file), otherwise the mean 
                             # log-like of feature vectors from one file will be computed, 
                             # and all log-likes will be stored in one file specified by '--outFile filename'
outDir = OUT_DIR             # -o: where to store log-likes (needed to be specified only if --for-each option ON)
inExt = .*                   # -e: extension of input files; also a wild card '.*' may be used
outExt = .logL               # -x: extension of output files (if --for-each option ON)
load-txt = false             # -L: load GMM from a text file
save-txt = true              # -T: save log-likes into a text file (if --for-each option ON);
                             # BIN file: [size_x(__int32), size_y(__int32), size_x*size_y*sizeof(float)]

data-T = 0                   # load input files in sves(0)/htk(1)/raw(2) format (default: 0 = SVES format)

SSE = false                  # accumulate statistics using SSE instructions (speed boost)
CUDA = false                 # accumulate statistics using GPU CUDA (speed boost - NVIDIA GPU needed)
GPU-id = -1		     # -G: if more GPUs are available, which one should be used (0 - (#available devices-1));
                             # for --GPU-id=-1 the computation will be distributed among all available GPUs
numThrd = 1                  # number of CPUs used
dwnsmp = 1                   # down-sample factor of input feature vectors
verbosity = 0                # -v: verbose mode
